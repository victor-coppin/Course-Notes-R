[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science with R",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "Tidyverse.html",
    "href": "Tidyverse.html",
    "title": "1  The Tidyverse",
    "section": "",
    "text": "2 Manipulating Data frames with dplyr and purrr\nThe Tidyverse can be installed with a single line of code: install.packages(“tidyverse”)\nThis command installs the nine core packages of the Tidyverse: dplyr, forcats, ggplot2, lubridate, purrr, readr, stringr, tibble, and tidyr. These are considered the core of the Tidyverse because you’ll use them in almost every analysis: - dplyr : manipulating data frames\n- forcats : provides tools for dealing with categorical variables\n- ggplot2 : producing statistical, or data, graphics\n- lubridate : makes it easier to work with dates and times in R\n- purr : working with functions and iteration in a functional programming style\n#| label: load-tidyverse #| warning: false #| message: false",
    "crumbs": [
      "R Basics : Introduction to Data Science",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>The Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#tidy-data",
    "href": "Tidyverse.html#tidy-data",
    "title": "1  The Tidyverse",
    "section": "2.1 Tidy Data",
    "text": "2.1 Tidy Data\nWe say that a data table is in tidy format if each row represents one observation and columns represent the different variables available for each of these observations. The murders dataset is an example of a tidy data frame.\n\nhead(murders)\n\n       state abb region population total\n1    Alabama  AL  South    4779736   135\n2     Alaska  AK   West     710231    19\n3    Arizona  AZ   West    6392017   232\n4   Arkansas  AR  South    2915918    93\n5 California  CA   West   37253956  1257\n6   Colorado  CO   West    5029196    65\n\n\nEach row represents a state with each of the five columns providing a different variable related to these states: name, abbreviation, region, population, and total murders.",
    "crumbs": [
      "R Basics : Introduction to Data Science",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>The Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#manipulating-data-frames",
    "href": "Tidyverse.html#manipulating-data-frames",
    "title": "1  The Tidyverse",
    "section": "2.2 Manipulating Data Frames",
    "text": "2.2 Manipulating Data Frames\n\n“The dplyr package from the tidyverse introduces functions that perform some of the most common operations when working with data frames and uses names for these functions that are relatively easy to remember. For instance, to change the data table by adding a new column, we use mutate. To filter the data table to a subset of rows, we use filter. Finally, to subset the data by selecting specific columns, we use select.”\n\n\n2.2.1 The mutate function\nThe mutate function is used to add new columns to a data frame or modify existing ones.\n\n# Add a new column 'rate' to the murders data frame\nmurders  &lt;- mutate(murders, rate = total / population * 100000)\n\nNote: to compute the rate, we used total and population columns, which are not defined in the global environment. The mutate function allows us to use the names of the columns directly.\n\n“This is one of dplyr’s main features. Functions in this package, such as mutate, know to look for variables in the data frame provided in the first argument.\nIn the call to mutate above, total will have the values in murders$total. This approach makes the code much more readable and concise.”\n\n\nhead(murders)\n\n       state abb region population total     rate\n1    Alabama  AL  South    4779736   135 2.824424\n2     Alaska  AK   West     710231    19 2.675186\n3    Arizona  AZ   West    6392017   232 3.629527\n4   Arkansas  AR  South    2915918    93 3.189390\n5 California  CA   West   37253956  1257 3.374138\n6   Colorado  CO   West    5029196    65 1.292453\n\n\nNote: the mutate function does not change the original data frame.\n\n“Although we have overwritten the original murders object, this does not change the object that is loaded with data(murders).\nIf we load the murders data again, the original will overwrite our mutated version.”\n\n\n\n2.2.2 Subsetting with filter\nThe filter function is used to subset rows based on logical conditions.\nFilter the murders data frame to include only the entries for which the murder rate is lower than 0.71.\n\n# Syntax : data, conditional statement.\nfilter(murders, rate &lt;= 0.71)\n\n          state abb        region population total      rate\n1        Hawaii  HI          West    1360301     7 0.5145920\n2          Iowa  IA North Central    3046355    21 0.6893484\n3 New Hampshire  NH     Northeast    1316470     5 0.3798036\n4  North Dakota  ND North Central     672591     4 0.5947151\n5       Vermont  VT     Northeast     625741     2 0.3196211\n\n\n\n\n2.2.3 Selecting columns with select\nThe select() function is used to extract specific columns from a data frame.\nIn the example below: - We create a new data frame containing only the columns state, region, and rate. - We then apply filter() to keep only the rows where the murder rate is less than or equal to 0.71.\n\nstate_region_rate_table &lt;- select(murders, state, region, rate)\nfilter(state_region_rate_table, rate &lt;= 0.71)\n\n          state        region      rate\n1        Hawaii          West 0.5145920\n2          Iowa North Central 0.6893484\n3 New Hampshire     Northeast 0.3798036\n4  North Dakota North Central 0.5947151\n5       Vermont     Northeast 0.3196211\n\n\n\n\n2.2.4 Exercises\n\nLoad the dplyr package and the murders dataset.\n\n\nlibrary(dplyr)\nlibrary(dslabs)\ndata(murders)\n\n\nUse the function mutate to add a column rank containing the rank, from highest to lowest murder rate. Make sure you redefine murders so we can keep using this variable.\n\n\nmurders &lt;- mutate(murders, rate = total / population * 10^5)\nmurders &lt;- mutate(murders, rank = rank(-rate))\nmurders %&gt;% head()\n\n       state abb region population total     rate rank\n1    Alabama  AL  South    4779736   135 2.824424   23\n2     Alaska  AK   West     710231    19 2.675186   27\n3    Arizona  AZ   West    6392017   232 3.629527   10\n4   Arkansas  AR  South    2915918    93 3.189390   17\n5 California  CA   West   37253956  1257 3.374138   14\n6   Colorado  CO   West    5029196    65 1.292453   38\n\nselect(murders, state, population) %&gt;% head()\n\n       state population\n1    Alabama    4779736\n2     Alaska     710231\n3    Arizona    6392017\n4   Arkansas    2915918\n5 California   37253956\n6   Colorado    5029196\n\n\nWe can write population rather than murders$population. The function mutate knows we are grabbing columns from murders.\n\nUse select to show the state names and abbreviations in murders. Do not redefine murders, just show the results.\n\n\nselect(murders, state, abb)\n\n                  state abb\n1               Alabama  AL\n2                Alaska  AK\n3               Arizona  AZ\n4              Arkansas  AR\n5            California  CA\n6              Colorado  CO\n7           Connecticut  CT\n8              Delaware  DE\n9  District of Columbia  DC\n10              Florida  FL\n11              Georgia  GA\n12               Hawaii  HI\n13                Idaho  ID\n14             Illinois  IL\n15              Indiana  IN\n16                 Iowa  IA\n17               Kansas  KS\n18             Kentucky  KY\n19            Louisiana  LA\n20                Maine  ME\n21             Maryland  MD\n22        Massachusetts  MA\n23             Michigan  MI\n24            Minnesota  MN\n25          Mississippi  MS\n26             Missouri  MO\n27              Montana  MT\n28             Nebraska  NE\n29               Nevada  NV\n30        New Hampshire  NH\n31           New Jersey  NJ\n32           New Mexico  NM\n33             New York  NY\n34       North Carolina  NC\n35         North Dakota  ND\n36                 Ohio  OH\n37             Oklahoma  OK\n38               Oregon  OR\n39         Pennsylvania  PA\n40         Rhode Island  RI\n41       South Carolina  SC\n42         South Dakota  SD\n43            Tennessee  TN\n44                Texas  TX\n45                 Utah  UT\n46              Vermont  VT\n47             Virginia  VA\n48           Washington  WA\n49        West Virginia  WV\n50            Wisconsin  WI\n51              Wyoming  WY\n\n\n\nUse filter to show the top 5 states with the highest murder rates.\n\n\nfilter(murders,  rank &lt;= 5)\n\n                 state abb        region population total      rate rank\n1 District of Columbia  DC         South     601723    99 16.452753    1\n2            Louisiana  LA         South    4533372   351  7.742581    2\n3             Maryland  MD         South    5773552   293  5.074866    4\n4             Missouri  MO North Central    5988927   321  5.359892    3\n5       South Carolina  SC         South    4625364   207  4.475323    5\n\n\n\nCreate a new data frame called no_south that removes states from the South region. How many states are in this category? You can use the function nrow for this.\n\nNote: We can remove rows using the != operator. For example, to remove Florida, we would do this:\n\nno_florida &lt;- filter(murders, state != \"Florida\")\n\n\n# Create the new data frame without south region\nno_south &lt;- filter(murders, region != \"South\")\n# Compute how many states are not in the south\nselect(no_south, state) %&gt;% nrow()\n\n[1] 34\n\n\nThere are 34 states which are not in the south",
    "crumbs": [
      "R Basics : Introduction to Data Science",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>The Tidyverse</span>"
    ]
  },
  {
    "objectID": "FSML-MQE.html",
    "href": "FSML-MQE.html",
    "title": "4  Mean Quadratic Error",
    "section": "",
    "text": "The MQE is a measure of how close the estimator is to the true parameter value.\nTo compare estimator we can compute the mean quadratic Eroor, denoted by MQE : \\[ \\Large\\text{MQE}(\\hat{\\theta}_{n}) = \\mathrm{Var}\\left(\\hat{\\theta}_n\\right) + \\left(b_{\\theta}\\left(\\hat{\\theta}_n\\right)\\right)^2\\]\nwhere \\(\\beta_{\\theta}(\\hat{\\theta}_{n}) = \\mathbb{E}\\left[\\hat{\\theta}_n\\right] - \\large\\theta\\) is the bias of the estimator \\(\\hat{\\theta}_n\\).\nWe say that \\(\\large\\hat{\\theta}_{n,1}\\) is better than \\(\\large\\hat{\\theta}_{n,2}\\) if : \\[\\Large\\forall n, \\; \\operatorname{MQE}(\\hat{\\theta}_{n,1})\\le \\operatorname{MQE}(\\hat{\\theta}_{n,2})\\]\n\n5 Example :\nLet concider :\n- \\(\\hat{\\theta}_{n,1} = \\operatorname{max}(X_k)\\) and \\(\\hat{\\theta}_{n,4} = \\frac{n+1}{n} \\cdot \\hat{\\theta}_{n,1}\\)\nWe have :\n\nMQE\\((\\hat{\\theta}_{n,1}) = \\dfrac{2\\theta^2}{(n+1)(n+2)}\\)\nMQE\\((\\hat{\\theta}_{n,4}) = \\dfrac{\\theta^2}{n(n+1)}\\)\n\n\\(\\forall n \\geq 2, \\; MQE(\\hat{\\theta}_{n,4}) &lt; MQE(\\hat{\\theta}_{n,1})\\)\nThus, we can conclude that \\(\\hat{\\theta}_{n,4}\\) is better than \\(\\hat{\\theta}_{n,1}\\)\nRemark: \\(\\hat{\\theta}_{n,4}\\) is the best among the two estimators we have considered. Since \\(\\hat{\\theta}_{n,4}\\) is unbiased, we know that for any unbiased estimator \\(\\hat{\\theta}_n\\), we have: \\[ \\Large\\text{Cramer Rao-Bound } \\leq \\mathrm{Var}\\left(\\hat{\\theta}_n\\right)\\]\nIf \\(\\mathrm{Var}\\left(\\hat{\\theta}_{n,4}\\right)\\) equals the Cramer-Rao bound, then the estimator cannot be improved; otherwise, improvement is possible.\n\n\n6 Convergence Illustration in R\n\ntheta &lt;- 2 # assumed true value of the parameter\n# MQE or Variance of the estimators\nmqe1 &lt;- 2 * theta^2 / ((2:50 + 1) * (2:50 + 2))\nmqe4 &lt;- theta^2 / (2:50 * (2:50 + 1))\nplot(mqe4, type = \"l\", col = \"red\")\nlines(mqe1, col = \"blue\")\nlegend(\"topright\",\n       legend = c(\"Estimator 4 (unbiased)\", \"Estimator 1 (max)\"),\n       col = c(\"red\", \"blue\"), lty = 1)\n\n\n\n\n\n\n\n\nThis plot shows that the unbiased estimator \\(\\hat{\\theta}{n,4}\\) consistently outperforms the maximum estimator \\(\\hat{\\theta}{n,1}\\) in terms of MQE, even for relatively small sample sizes (e.g., \\(n = 10\\)). However, as the sample size increases, the MQEs of both estimators get closer, meaning the performance gap narrows — although \\(\\hat{\\theta}_{n,4}\\) remains superior for all \\(n\\).",
    "crumbs": [
      "Foundations of Statistical Analysis and Machine Learning",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Mean Quadratic Error</span>"
    ]
  },
  {
    "objectID": "Inverse_Transform_Sampling.html",
    "href": "Inverse_Transform_Sampling.html",
    "title": "5  Inverse Transform Sampling",
    "section": "",
    "text": "5.1 Inverse density function with R\nFrom FSML2 exercice we get the following CFD from the graph below\n\\[\nF_X(t) =\n\\begin{cases}\n0 & \\text{if } t &lt; 0 \\\\\\\\\n\\frac{t^2}{2\\theta^2} & \\text{if } t \\in [0, \\theta] \\\\\\\\\n-\\frac{t^2}{2\\theta^2} + \\frac{2t}{2\\theta} - 1 & \\text{if } t \\in (\\theta, 2\\theta) \\\\\\\\\n1 & \\text{if } t \\geq 2\\theta\n\\end{cases}\n\\]\nThe computation of the inverse function, \\(F_X(t)^{-1}\\) give us :\n\\[\nF_X^{-1} : [0, 1] \\rightarrow [0, 2\\theta]\n\\]\n\\[\nF_X^{-1}(t) =\n\\begin{cases}\n\\sqrt{2\\theta^2 \\cdot t} & \\text{if } t \\in [0, \\tfrac{1}{2}] \\\\\\\\\n2\\theta - \\sqrt{2\\theta^2 \\cdot (1 - t)} & \\text{if } t \\in (\\tfrac{1}{2}, 1]\n\\end{cases}\n\\]\nWhich could be written as a sum with indicator functions as:\n\\[F_X^{-1}(t) = \\sqrt{2\\theta^2 \\cdot t}\\upharpoonleft\\!\\!\\!\\vert_{t \\in[0, \\tfrac{1}{2}]} + 2\\theta - \\sqrt{2\\theta^2 \\cdot (1 - t)} \\upharpoonleft\\!\\!\\!\\vert_{t \\in ]\\tfrac{1}{2}, 1]}\\]\nNote: becareful to count just one time the value \\(tfrac{1}{2}\\)\nThanks to the last equation form, we can write \\(F_X^{-1}(t)\\) in R easily :\nThe logical expressions like (t &lt;= 1/2) and (t &gt; 1/2) act as “indicator functions”.\nIn R, TRUE is treated as 1 and FALSE as 0 in arithmetic operations. This means only the correct formula is applied for each value of t.\nFor example, if t = 0.3, (t &lt;= 1/2) is TRUE (1), so the first formula is used. If t = 0.7, (t &gt; 1/2) is TRUE (1), so the second formula is used.\n# Generate 10,000 random numbers uniformly distributed between 0 and 1\nA &lt;- runif(10000)\n\n# Define the inverse transform function\ninvFX &lt;- function(t, theta) {\n# Logical expressions act as indicators (see explanation above)\n  sqrt(2 * t * theta^2) * (0 &lt;= t) * (t &lt;= 1 / 2) +\n    (2 * theta - sqrt(2 * theta^2 * (1 - t))) * (t &gt; 1 / 2) * (t &lt;= 1)\n}\n\ntheta &lt;- 2  # Set the parameter theta\nX &lt;- invFX(A, theta)   # Apply the inverse transform to the uniform random numbers\nhead(X)  # Display the first few values\n\n[1] 2.4212967 3.0195982 2.4546096 0.3872544 2.9336624 1.8484409\nRemark: In R, you do not need to use ‘return()’ if the value to return is the last line of the function. This is a common style in R, especially for simple functions.",
    "crumbs": [
      "Foundations of Statistical Analysis and Machine Learning",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Inverse Transform Sampling</span>"
    ]
  },
  {
    "objectID": "Inverse_Transform_Sampling.html#display-the-value-of-x",
    "href": "Inverse_Transform_Sampling.html#display-the-value-of-x",
    "title": "5  Inverse Transform Sampling",
    "section": "5.2 Display the value of X",
    "text": "5.2 Display the value of X\n\nhist(X,freq=FALSE)",
    "crumbs": [
      "Foundations of Statistical Analysis and Machine Learning",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Inverse Transform Sampling</span>"
    ]
  },
  {
    "objectID": "Inverse_Transform_Sampling.html#simulation-of-a-density-function-thanks-to-uniform-random-variable",
    "href": "Inverse_Transform_Sampling.html#simulation-of-a-density-function-thanks-to-uniform-random-variable",
    "title": "5  Inverse Transform Sampling",
    "section": "5.3 Simulation of a density function thanks to uniform random variable",
    "text": "5.3 Simulation of a density function thanks to uniform random variable\n\n“We recognize the function \\(f\\). To generate samples from a random variable \\(X\\) with an unknown density function, it is sufficient to know the inverse of its cumulative distribution function (i.e., \\(F_X^{-1}(t)\\)). By applying this inverse to samples from a uniform distribution, we can simulate values from \\(X\\).”",
    "crumbs": [
      "Foundations of Statistical Analysis and Machine Learning",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Inverse Transform Sampling</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "9  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Summary</span>"
    ]
  }
]